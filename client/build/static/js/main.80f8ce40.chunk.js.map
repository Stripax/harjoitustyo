{"version":3,"sources":["NewExamNameDialog.js","RegisterDialog.js","LoginDialog.js","AlertPopup.js","DragDrop.js","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["NewExamNameDialog","props","useState","isOpen","setIsOpen","newName","setNewName","path","addNewExam","a","axios","post","examName","examScore","startdate","enddate","result","data","id","alertFeedback","message","severity","dispatch","Dialog","open","TransitionComponent","Zoom","transitionDuration","enter","exit","onExiting","closed","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","autoComplete","margin","label","type","fullWidth","onChange","event","newExamNameChanged","target","value","DialogActions","Button","onClick","color","disabled","length","RegisterDialog","isPasswordCorrect","setIsPasswordCorrect","firstName","surname","email","password","passwordCheck","newUser","setNewUser","e","checkPassword","passwordToBeChecked","addNewUser","status","variant","required","error","LoginDialog","loginData","setLoginData","login","isAdmin","isLoginSuccessful","admin","userId","AlertPopup","isAlertOpen","setIsAlertOpen","Snackbar","autoHideDuration","anchorOrigin","horizontal","vertical","Slide","TransitionProps","direction","elevation","closeText","DragDrop","useStyles","makeStyles","table","minWidth","chatSection","width","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","Chat","messageText","setMessageText","classes","Grid","container","component","Paper","className","item","xs","Divider","style","padding","List","ListItem","ListItemText","primary","align","secondary","reducer","state","action","deepCopy","JSON","parse","stringify","examId","findIndex","exam","activeExam","questions","questionIndex","question","newQuestionText","choices","answerIndex","answer","newAnswerText","isCorrect","checked","splice","push","newExamName","newQuestion","uuid","newAnswer","isSelected","put","answer_id","answerId","alert","checkBoxClicked","is_selected","examQuestions","forEach","questionChoices","choice","i","filter","question_id","Error","App","useReducer","setActiveExam","setUserId","alertMessage","setAlertMessage","isDataInitialized","setIsDataInitialized","isQuestionsInitialized","setIsQuestionsInitialized","isQuestionChoicesInitialized","setIsQuestionChoicesInitialized","isShowCorrectAnswers","setIsShowCorrectAnswers","setIsAdmin","isLoggedIn","setIsLoggedIn","isNewExamNameDialogOpen","setIsNewExamNameDialogOpen","isRegisterDialogOpen","setIsRegisterDialogOpen","isLoginDialogOpen","setIsLoginDialogOpen","isChatWindowOpen","setIsChatWindowOpen","useEffect","get","resultExams","fetchData","resultQuestions","resultChoices","GreenCheckbox","withStyles","root","green","Checkbox","buttonTexts","LocalizedStrings","en","chat","info","exams","signup","signin","fi","getLanguage","setLanguage","window","success","map","Number","exam_name","showExamButtons","startIcon","justify","alignItems","question_text","FormControlLabel","control","questionId","is_correct","answer_text","showQuestions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80f8ce40.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\nconst NewExamNameDialog = (props) => {\r\n\r\n  const [isOpen, setIsOpen] = useState(true)\r\n  const [newName, setNewName] = useState(\"\")\r\n\r\n  const newExamNameChanged = (newName) => {\r\n    setNewName(newName)\r\n  }\r\n\r\n  var path = null\r\n\r\n  switch (process.env.NODE_ENV) {\r\n    case 'production':\r\n      path = \"https://exam-program.herokuapp.com/\" \r\n      break\r\n    case 'development':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    case 'test':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    default:\r\n      throw \"Environment not set properly!\"\r\n  }\r\n\r\n  const addNewExam = async() => {\r\n    \r\n    try {\r\n      let result = await axios.post(path + \"exam/\", { examName: newName, examScore: 100, startdate: \"2021-01-01\", enddate: \"2022-01-01\" })\r\n\r\n      if (result.data.id > 0) {\r\n        props.alertFeedback(result.data.message, result.data.severity)\r\n        props.dispatch(newName)\r\n      }\r\n    }\r\n\r\n    catch(error) {\r\n      props.alertFeedback(error.message, \"error\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open = { isOpen }\r\n        TransitionComponent = { Zoom }\r\n        transitionDuration = {{ enter: 500, exit: 300 }}\r\n        onExiting = {() => { props.closed(); setIsOpen(false) }}\r\n        onClose = {() => { setIsOpen(false); props.closed() }}\r\n        aria-labelledby=\"form-dialog-title\">\r\n\r\n        <DialogTitle id=\"form-dialog-title\">Uuden tentin nimi</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Anna uuden tentin nimi ja valitse sitten OK\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            autoComplete = \"off\"\r\n            margin=\"dense\"\r\n            id=\"newExamNameTextField\"\r\n            label=\"Tentin Nimi\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange = {(event) => newExamNameChanged(event.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsOpen(false)} color=\"primary\">\r\n            Peruuta\r\n          </Button>\r\n          <Button onClick={() => {setIsOpen(false); addNewExam()}} disabled = { newName.length < 1 } color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewExamNameDialog","import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\nconst RegisterDialog = (props) => {\r\n\r\n  const [isOpen, setIsOpen] = useState(props.open)\r\n  const [isPasswordCorrect, setIsPasswordCorrect] = useState(false)\r\n  const [newUser, setNewUser] = useState({\r\n    firstName: \"\",\r\n    surname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordCheck: \"\"\r\n  })\r\n\r\n  var path = null\r\n\r\n  switch (process.env.NODE_ENV) {\r\n    case 'production':\r\n      path = \"https://exam-program.herokuapp.com/\" \r\n      break\r\n    case 'development':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    case 'test':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    default:\r\n      throw \"Environment not set properly!\"\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setNewUser({ ...newUser, [e.target.id]: e.target.value })\r\n  }\r\n\r\n  const checkPassword = (passwordToBeChecked) => {\r\n    if (newUser.password == passwordToBeChecked || newUser.passwordCheck == passwordToBeChecked) {\r\n        setIsPasswordCorrect(true)\r\n    }\r\n    else {\r\n        setIsPasswordCorrect(false)\r\n    }\r\n  }\r\n\r\n  const addNewUser = async() => {\r\n\r\n    try {\r\n      let result = await axios.post(path + \"adduser/\", { firstName: newUser.firstName, surname: newUser.surname, email: newUser.email, password: newUser.password })\r\n    \r\n      if (result.status == 200) {\r\n        props.alertFeedback(result.data.message, result.data.severity)\r\n      }\r\n    \r\n    } catch (error) {\r\n      props.alertFeedback(error.message, \"error\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open = { isOpen }\r\n        TransitionComponent = { Zoom }\r\n        transitionDuration = {{ enter: 700, exit: 500 }}\r\n        onExiting = {() => {props.closed(); setIsOpen(false)}}\r\n        onClose = {() => setIsOpen(false)}\r\n        aria-labelledby=\"form-dialog-title\">\r\n          \r\n        <DialogTitle id=\"form-dialog-title\">Rekisteröidy</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Syötä etu- ja sukunimi, sähköpostiosoite sekä salasanasi\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            autoComplete = \"off\"\r\n            margin = \"dense\"\r\n            id = \"firstName\"\r\n            label = \"Etunimi\"\r\n            type = \"text\"\r\n            variant = \"outlined\"\r\n            fullWidth = \"true\"\r\n            onChange = {(e) => onChange(e)}\r\n          />\r\n          <TextField\r\n            autoComplete = \"off\"\r\n            margin = \"dense\"\r\n            id = \"surname\"\r\n            label = \"Sukunimi\"\r\n            type = \"text\"\r\n            variant = \"outlined\"\r\n            fullWidth = \"true\"\r\n            onChange = {(e) => onChange(e)}\r\n          />\r\n          <TextField\r\n            autoComplete = \"off\"\r\n            required\r\n            margin = \"dense\"\r\n            id = \"email\"\r\n            label = \"Sähköpostiosoite\"\r\n            type = \"text\"\r\n            variant = \"outlined\"\r\n            fullWidth = \"true\"\r\n            onChange = {(e) => onChange(e)}\r\n          />\r\n          <TextField\r\n            autoComplete = \"off\"\r\n            required\r\n            margin = \"dense\"\r\n            id = \"password\"\r\n            label = \"Salasana\"\r\n            type = \"password\"\r\n            variant = \"outlined\"\r\n            fullWidth = \"true\"\r\n            onChange = {(e) => {onChange(e); checkPassword(e.target.value)}}\r\n          />\r\n          <TextField\r\n            autoComplete = \"off\"\r\n            required\r\n            error = {!isPasswordCorrect || newUser.password.length < 1}\r\n            margin = \"dense\"\r\n            id = \"passwordCheck\"\r\n            label = \"Anna salasanasi uudestaan\"\r\n            type = \"password\"\r\n            variant = \"outlined\"\r\n            fullWidth = \"true\"\r\n            onChange = {(e) => {onChange(e); checkPassword(e.target.value)}}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick = {() => setIsOpen(false)} color = \"primary\">\r\n            Peruuta\r\n          </Button>\r\n          <Button onClick = {() => {setIsOpen(false); addNewUser()}} color = \"primary\" disabled = { !isPasswordCorrect || newUser.password.length < 1 }>\r\n            Rekisteröidy\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>  \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RegisterDialog","import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\nconst LoginDialog = (props) => {\r\n\r\n  const [isOpen, setIsOpen] = useState(props.open)\r\n  const [loginData, setLoginData] = useState({\r\n    email: \"\",\r\n    password: \"\"\r\n  })\r\n\r\n  var path = null\r\n\r\n  switch (process.env.NODE_ENV) {\r\n    case 'production':\r\n      path = \"https://exam-program.herokuapp.com/\" \r\n      break\r\n    case 'development':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    case 'test':\r\n      path = \"http://localhost:4000/\"\r\n      break\r\n    default:\r\n      throw \"Environment not set properly!\"\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setLoginData({ ...loginData, [e.target.id]: e.target.value })\r\n  }\r\n\r\n  const login = async() => {\r\n\r\n    try {\r\n      let result = await axios.post(path + \"login/\", { email: loginData.email, password: loginData.password })\r\n\r\n      if (result.status == 200) {\r\n\r\n        if (result.data.isAdmin) {\r\n          props.alertFeedback(\"Tervetuloa Admin\", \"success\")\r\n          props.isLoginSuccessful(result.data.isLoginSuccessful)\r\n          props.admin()\r\n        }\r\n        else {\r\n          props.alertFeedback(result.data.message, result.data.severity)\r\n          props.isLoginSuccessful(result.data.isLoginSuccessful)\r\n        }        \r\n\r\n        if (result.data.isLoginSuccessful) {\r\n          props.userId(result.data.userId)\r\n        }\r\n      }\r\n    \r\n    } catch (error) {\r\n      props.alertFeedback(error.message, \"error\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open = { isOpen }\r\n        TransitionComponent = { Zoom }\r\n        transitionDuration = {{ enter: 700, exit: 500 }}\r\n        onExiting = {() => {props.closed(); setIsOpen(false)}}\r\n        onClose = {() => setIsOpen(false)}\r\n        aria-labelledby=\"form-dialog-title\">\r\n        \r\n        <DialogTitle id = \"form-dialog-title\">Sisäänkirjautuminen</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Syötä sähköpostiosoitteesi sekä salasanasi\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            required\r\n            autoComplete = \"off\"\r\n            margin = \"dense\"\r\n            id = \"email\"\r\n            label = \"Sähköpostiosoite\"\r\n            type = \"text\"\r\n            fullWidth\r\n            onChange = {(e) => onChange(e)}\r\n          />\r\n          <TextField\r\n            required\r\n            autoComplete = \"off\"\r\n            margin = \"dense\"\r\n            id = \"password\"\r\n            label = \"Salasana\"\r\n            type = \"password\"\r\n            fullWidth\r\n            onChange = {(e) => onChange(e)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsOpen(false)} color = \"primary\">\r\n            Peruuta\r\n          </Button>\r\n          <Button onClick={() => {setIsOpen(false); login()}} disabled = { loginData.email.length < 1 || loginData.password.length < 1 } color = \"primary\">\r\n            Kirjaudu\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginDialog","import { Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst AlertPopup = (props) => {\r\n\r\n  const [isAlertOpen, setIsAlertOpen] = useState(props.open)\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar \r\n        open = { isAlertOpen }\r\n        autoHideDuration = { 6000 }\r\n        anchorOrigin = {{ horizontal: \"left\", vertical: \"bottom\" }}\r\n        TransitionComponent = { Slide }\r\n        transitionDuration = {{ enter: 800, exit: 1200 }}\r\n        TransitionProps = {{ direction: \"up\" }}\r\n        onExiting = {() => {props.closed(); setIsAlertOpen(false)}}\r\n        onClose = {() => setIsAlertOpen(false)}>\r\n          \r\n          <MuiAlert\r\n            elevation = {6}\r\n            variant = \"filled\"\r\n            closeText = \"Sulje ikkuna\"\r\n            severity = { props.alertFeedback.severity }\r\n            onClose = {() => setIsAlertOpen(false)}\r\n          >\r\n            { props.alertFeedback.message }\r\n          </MuiAlert>\r\n      </Snackbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertPopup","import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nfunction DragDrop(props) {\r\n    const {getRootProps, getInputProps, open, acceptedFiles} = useDropzone({\r\n        // Disable click and keydown behavior\r\n        noClick: true,\r\n        noKeyboard: true\r\n      });\r\n    \r\n      const files = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n      ));\r\n    \r\n      return (\r\n        <div className=\"container\">\r\n            <div {...getRootProps({className: 'dropzone'})}>\r\n                <section className = \"dragdrop\">\r\n                    <input {...getInputProps()} />\r\n                    \r\n                    <p>Raahaa tiedostot tähän</p>\r\n\r\n                    <button type=\"button\" onClick={open}>\r\n                        Avaa resurssienhallinta\r\n                    </button>\r\n                    \r\n                    <aside>\r\n                        <h4>Tiedostot:</h4>\r\n                        <ul>{files}</ul>\r\n                    </aside>\r\n                </section>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\nexport default DragDrop","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\n// const connection = new WebSocket(\"ws://localhost:8080\")\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '80vh'\r\n  },\r\n  headBG: {\r\n      backgroundColor: '#e0e0e0'\r\n  },\r\n  borderRight500: {\r\n      borderRight: '1px solid #e0e0e0'\r\n  },\r\n  messageArea: {\r\n    height: '65vh',\r\n    overflowY: 'auto'\r\n  }\r\n});\r\n\r\nconst Chat = () => {\r\n  const [messageText, setMessageText] = useState(\"\")\r\n  const classes = useStyles();\r\n\r\n//   const sendMessage = () => {\r\n//     connection.send(messageText)\r\n//   }\r\n\r\n  const onChange = (e) => {\r\n    setMessageText(e.target.value)\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <Grid container component={Paper} className={classes.chatSection}>\r\n            <Grid item xs={3} className={classes.borderRight500}>\r\n                <Divider />\r\n                <Grid item xs={12} style={{padding: '5px'}}>\r\n                    <TextField id=\"chatName\" label=\"Nimesi\" variant=\"outlined\" fullWidth />\r\n                </Grid>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText>Remy Sharp</ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText primary=\"Alice\">Alice</ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText primary=\"Cindy Baker\">Cindy Baker</ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <List className={classes.messageArea}>\r\n                    <ListItem key=\"1\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Hey man, What's up?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"09:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"2\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" primary=\"Hey, Iam Good! What about you ?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" secondary=\"09:31\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"3\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Cool. i am good, let's catch up!\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"10:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <Grid item xs={11}>\r\n                        <TextField label=\"Kirjoita viesti\" fullWidth onChange = {(e) => onChange(e)} value = {messageText} autoFocus/>\r\n                    </Grid>\r\n                    <Grid xs={1} align=\"right\">\r\n                        {/* <Fab color=\"primary\" aria-label=\"add\" onClick = {() => {sendMessage(); setMessageText(\"\")}}><SendIcon /></Fab> */}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React from 'react';\nimport { useState, useEffect, useReducer } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport axios from 'axios';\nimport './App.css';\nimport LocalizedStrings from 'react-localization'\nimport {useDropzone} from 'react-dropzone'\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport { FormControlLabel } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { DeleteForeverOutlined } from '@material-ui/icons';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport NewExamNameDialog from './NewExamNameDialog';\nimport TestResultsDemo from './TestResultsDemo';\nimport RegisterDialog from './RegisterDialog';\nimport LoginDialog from './LoginDialog';\nimport AlertPopup from './AlertPopup';\nimport DragDrop from './DragDrop'\nimport Chat from './Chat'\n\nvar path = null\n\n  switch (process.env.NODE_ENV) {\n    case 'production':\n      path = \"https://exam-program.herokuapp.com/\" \n      break\n    case 'development':\n      path = \"http://localhost:4000/\"\n      break\n    case 'test':\n      path = \"http://localhost:4000/\"\n      break\n    default:\n      throw \"Environment not set properly!\"\n  }\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state))\n  let examId = deepCopy.findIndex(exam => exam.id == action.activeExam)\n\n  switch(action.type) {\n    case 'changeQuestion':\n      deepCopy[action.data.activeExam].questions[action.data.questionIndex].question = action.data.newQuestionText\n      return deepCopy\n\n    case 'changeAnswerText':\n      deepCopy[action.data.activeExam].questions[action.data.questionIndex].choices[action.data.answerIndex].answer = action.data.newAnswerText\n      return deepCopy\n    \n    case 'changeCorrectAnswer':\n      deepCopy[action.data.activeExam].questions[action.data.questionIndex].choices[action.data.answerIndex].isCorrect = action.data.checked\n      return deepCopy\n\n    case 'deleteQuestion':\n      deepCopy[action.data.activeExam].questions.splice(action.data.questionIndex, 1)\n      return deepCopy\n\n    case 'deleteAnswer':\n      deepCopy[action.data.activeExam].questions[action.data.questionIndex].choices.splice(action.data.answerIndex, 1)\n      return deepCopy\n\n    case 'addExam':\n      deepCopy.push(action.newExamName)\n      return deepCopy\n\n    case 'addQuestion':\n      let newQuestion = { id: uuid(), question: \"\", choices: [] }\n      deepCopy[action.data.activeExam].questions.push(newQuestion)\n      return deepCopy\n\n    case 'addAnswer':\n      let newAnswer = { id: uuid(), answer: \"\", isSelected: false, isCorrect: false }\n      deepCopy[action.data.activeExam].questions[action.data.questionIndex].choices.push(newAnswer)\n      return deepCopy\n\n    case 'checkBoxClicked':\n      \n      const checkBoxClicked = async() => {\n\n        try {\n          let result = await axios.put(path + \"checkbox\", { answer_id: action.data.answerId, checked: action.data.checked })\n        }\n        catch (ex) {\n          alert(ex.message)\n        }\n      }\n\n      checkBoxClicked()\n      deepCopy[examId].questions[action.data.questionIndex].choices[action.data.answerIndex].is_selected = action.data.checked\n      return deepCopy\n\n    case 'getQuestions':\n      let examQuestions = []\n\n      action.data.forEach(question => {\n        examQuestions.push(question)\n      })\n\n      deepCopy[examId][\"questions\"] = examQuestions      \n      return deepCopy\n\n      case 'getQuestionChoices':\n      let questionChoices = []\n\n      action.data.forEach(choice => {\n        questionChoices.push(choice)\n      })\n\n      for (var i = 0; i < deepCopy[examId].questions.length; i++) {\n        deepCopy[examId].questions[i][\"choices\"] = questionChoices.filter(choice => choice.question_id == deepCopy[examId].questions[i].id)\n      }\n\n      return deepCopy\n    \n    case 'getExamNames':\n      return action.data\n\n    default: \n      throw new Error()\n  }\n}\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, [])\n  const [activeExam, setActiveExam] = useState(-1)\n  const [userId, setUserId] = useState(0)\n  const [alertMessage, setAlertMessage] = useState({ message: \"\", severity: \"\" })\n  const [isDataInitialized, setIsDataInitialized] = useState(false)\n  const [isQuestionsInitialized, setIsQuestionsInitialized] = useState(false)\n  const [isQuestionChoicesInitialized, setIsQuestionChoicesInitialized] = useState(false)\n  const [isShowCorrectAnswers, setIsShowCorrectAnswers] = useState(false)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [isNewExamNameDialogOpen, setIsNewExamNameDialogOpen] = useState(false)\n  const [isRegisterDialogOpen, setIsRegisterDialogOpen] = useState(false)\n  const [isLoginDialogOpen, setIsLoginDialogOpen] = useState(false)\n  const [isAlertOpen, setIsAlertOpen] = useState(false)\n  const [isDemoShown, setIsDemoShown] = useState(false)\n  const [isChatWindowOpen, setIsChatWindowOpen] = useState(false)\n\n  // const connection = new WebSocket(\"ws://localhost:8080\")\n\n  useEffect (() => {\n\n    const fetchData = async() => {\n\n      try {\n        let resultExams = await axios.get(path + \"exams\")\n\n        if (resultExams.data.length > 0) {\n          dispatch({ type: 'getExamNames', data: resultExams.data })\n          setIsDataInitialized(true)\n        }\n      }\n      catch (ex) {\n        setAlertMessage({ message: ex.message, severity: \"error\" })\n        setIsAlertOpen(true)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  useEffect (() => {\n    if (activeExam >= 0) {\n\n      const fetchData = async() => {\n\n        try {\n          let resultQuestions = await axios.get(path + \"questions/\" + activeExam)\n          let resultChoices = await axios.get(path + \"answers/\" + activeExam)\n\n          if (resultQuestions.data.length > 0) {\n            dispatch({ type: 'getQuestions', data: resultQuestions.data, activeExam: activeExam })\n            setIsQuestionsInitialized(true)\n          }\n\n          if (resultChoices.data.length > 0) {\n            dispatch({ type: 'getQuestionChoices', data: resultChoices.data, activeExam: activeExam })\n            setIsQuestionChoicesInitialized(true)\n          }\n        }\n        catch (ex) {\n          setAlertMessage({ message: ex.message, severity: \"error\" })\n          setIsAlertOpen(true)\n        }\n      }\n\n      fetchData()\n      setIsShowCorrectAnswers(false)\n    }\n  }, [activeExam])\n\n  // ------------------ ADMIN PART OF THE CODE ----------------------------\n\n /*  const editQuestions = () => {\n    if (activeExam >= 0) {\n      return state[activeExam].questions.map((item, questionIndex) =>\n        <Paper key = {item.id} className = \"edit-questions\">\n          <Button color = \"secondary\" startIcon = {<DeleteForeverOutlined />} onClick = {() => dispatch({ type: 'deleteQuestion', data: { activeExam: activeExam, questionIndex: questionIndex }}) }></Button>\n          <input type = \"text\" size = \"50\" value = {item.question} onChange = {(event) => dispatch({ type: 'changeQuestion', data: { activeExam: activeExam, newQuestionText: event.target.value, questionIndex: questionIndex }})} />          \n          <br></br>\n          { item.choices.map((i, answerIndex) => \n            <div>\n              <GreenCheckbox checked = {i.isCorrect} onClick = {(event) => dispatch({ type: 'changeCorrectAnswer', data: { checked: event.target.checked, activeExam: activeExam, questionIndex: questionIndex, answerIndex: answerIndex }})}></GreenCheckbox>\n              <input key = {i.id} type = \"text\" size = \"50\" value = {i.answer} onChange = {(event) => dispatch({ type: 'changeAnswerText', data: { activeExam: activeExam, newAnswerText: event.target.value, questionIndex: questionIndex, answerIndex: answerIndex}})} />\n              <Button startIcon = {<DeleteForeverOutlined />} onClick = {() => dispatch({ type: 'deleteAnswer', data: { activeExam: activeExam, questionIndex: questionIndex, answerIndex: answerIndex }})}></Button>\n              <br></br>\n            </div>\n          ) }\n          <Button key = {uuid()} startIcon = {<AddCircleOutlineIcon />} onClick = {() => dispatch({ type: 'addAnswer', data: { activeExam: activeExam, questionIndex: questionIndex }})}></Button>\n        </Paper>)\n    }\n  } */\n\n  // ------------------- USER PART OF THE CODE ---------------------------\n\n  const showExamButtons = () => {\n\n    if (isDataInitialized) {\n      return state.map((item) => \n      <Button key = {uuid()} color = \"primary\" onClick = {() => {setActiveExam(Number(item.id)); setIsQuestionsInitialized(false); setIsQuestionChoicesInitialized(false)}}>{ item.exam_name }</Button>)\n    }\n  }\n  \n  const showQuestions = () => {\n    let examId = state.findIndex(exam => exam.id == activeExam)\n\n    if (isQuestionsInitialized && isQuestionChoicesInitialized && activeExam >= 0) {\n      return state[examId].questions.map((item, questionIndex) =>\n      <Paper key = {item.id} className = \"question\">\n        <h2 className = \"question-header\">{ item.question_text }</h2>\n        { item.choices.map((i, answerIndex) => \n          <div key = {i.id}>\n            <FormControlLabel\n              control = {<div>\n              { isShowCorrectAnswers === false ? \n              <Checkbox checked = {i.is_selected} onClick = {(event) => dispatch({ type: 'checkBoxClicked', data: { checked: event.target.checked, questionId: item.id, questionIndex: questionIndex, answerId: i.id, answerIndex: answerIndex }, activeExam: activeExam})} /> : \n              <Checkbox color = \"primary\" checked = {i.is_selected} disabled /> }\n              { isShowCorrectAnswers && <GreenCheckbox checked = {i.is_correct} disabled /> }\n                      </div>}\n            label = {i.answer_text} />\n          </div>\n        )}\n      </Paper>)\n    }\n  }\n\n  const GreenCheckbox = withStyles({\n    root: {\n      color: green[400],\n      '&$checked': {\n        color: green[600],\n      },\n    },\n    checked: {},\n  })((props) => <Checkbox color=\"default\" {...props} />)\n\n// EI TOIMI HALUTULLA TAVALLA\n  // const alertMessageBox = (msg, svr) => {\n  //   setIsAlertOpen(true)\n  //   setAlertMessage({ message: msg, severity: svr })\n  // }\n\n  const logOut = () => {\n    setAlertMessage({ message: \"Kirjauduit ulos\", severity: \"info\" })\n    setIsAlertOpen(true)\n    setIsLoggedIn(false)\n    setIsAdmin(false)\n    setUserId(0)\n  }\n\n  const changeLanguage = () => {\n    if (buttonTexts.getLanguage() == \"fi\") {\n      buttonTexts.setLanguage('en')\n      setAlertMessage({ message: \"Language switched to English\", severity: \"info\" })\n      setIsAlertOpen(true)\n    }\n    else {\n      buttonTexts.setLanguage('fi')\n      setAlertMessage({ message: \"Kieli vaihdettu suomeksi\", severity: \"info\" })\n      setIsAlertOpen(true)\n    }\n  }\n\n  const buttonTexts = new LocalizedStrings({\n    en: {\n      chat: \"Chat\",\n      info: \"About\",\n      admin: \"Admin\",\n      exams: \"Show exams\",\n      signup: \"Signup\",\n      signin: \"Sign in\",\n      exit: \"Exit\"\n    },\n    fi: {\n      chat: \"Keskustelu\",\n      info: \"Tietoa sovelluksesta\",\n      admin: \"Järjestelmänvalvoja\",\n      exams: \"Näytät tentit\",\n      signup: \"Rekisteröidy\",\n      signin: \"Kirjaudu\",\n      exit: \"Poistu\"\n    }\n  })\n\n  return (\n    <div className = \"App\">\n      <div className = \"header\">\n        <div className = \"header-buttons\">\n          <Button key = {uuid()} color = \"inherit\" onClick = {() => changeLanguage()}>FI / EN</Button>\n          <Button key = {uuid()} color = \"inherit\" onClick = {() => window.open(\"https://www.youtube.com/watch?v=sAqnNWUD79Q\", \"_blank\")}>{buttonTexts.info}</Button>\n          <Button key = {uuid()} color = \"inherit\" onClick = {() => setIsChatWindowOpen(!isChatWindowOpen)}>{buttonTexts.chat}</Button>\n          { !isLoggedIn && <Button key = {uuid()} color = \"inherit\" disabled>{buttonTexts.admin}</Button>}\n          { isLoggedIn && <Button key = {uuid()} color = \"inherit\" onClick = {() => setActiveExam(-1)}>{buttonTexts.exams}</Button> }\n          { !isLoggedIn && <Button key = {uuid()} color = \"inherit\" onClick = {() => setIsRegisterDialogOpen(true)}>{buttonTexts.signup}</Button> }\n          { !isLoggedIn && <Button key = {uuid()} color = \"inherit\" onClick = {() => setIsLoginDialogOpen(true)}>{buttonTexts.signin}</Button> }\n          { isLoggedIn && <Button key = {uuid()} color = \"inherit\" onClick = {() => logOut()}>{buttonTexts.exit}</Button> }\n        </div>\n      </div>\n\n      <div className = \"chat-window\">\n        { isChatWindowOpen && <Chat key = {uuid()} closed = {() => setIsChatWindowOpen(false)}></Chat> }\n      </div>\n\n      <div className = \"login-register-dialogs\">\n        <RegisterDialog key = {uuid()} open = {isRegisterDialogOpen} closed = {() => setIsRegisterDialogOpen(false)} alertFeedback = {(message, severity) => {setIsAlertOpen(true); setAlertMessage({message: message, severity: severity})}}></RegisterDialog>\n        <LoginDialog key = {uuid()} open = {isLoginDialogOpen} closed = {() => setIsLoginDialogOpen(false)} alertFeedback = {(message, severity) => {setIsAlertOpen(true); setAlertMessage({message: message, severity: severity})}} isLoginSuccessful = {(success) => setIsLoggedIn(success)} userId = {(id) => setUserId(id)} admin = {() => setIsAdmin(true)}></LoginDialog>\n        <AlertPopup key = {uuid()} open = {isAlertOpen} closed = {() => {setIsAlertOpen(false); setAlertMessage({message: \"\", severity: \"\"})}} alertFeedback = {{message: alertMessage.message, severity: alertMessage.severity}}></AlertPopup>\n      </div>\n\n      <div className = \"exam-buttons\">\n        { isLoggedIn && showExamButtons() }\n        { isAdmin && <Button key = {uuid()} color = \"primary\" startIcon = {<AddCircleOutlineIcon />} onClick = {() => setIsNewExamNameDialogOpen(true)}></Button> }\n        { isNewExamNameDialogOpen && <NewExamNameDialog key = {uuid()} closed = {() => {setIsNewExamNameDialogOpen(false); setAlertMessage({ message: \"\", severity: \"\"})}} alertFeedback = {(message, severity) => {setIsAlertOpen(true); setAlertMessage({message: message, severity: severity})}} dispatch = {(newName) => dispatch({ type: 'addExam', newExamName: newName })}></NewExamNameDialog> }\n      </div>\n\n      <div className = \"main-body\">\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"stretch\">\n          <Grid item xs = {12}>\n            { !isAdmin && isQuestionsInitialized && showQuestions() }\n            {/* { isAdmin && editQuestions() } */}\n            { isAdmin && activeExam >= 0 && <Button key = {uuid()} startIcon = {<AddCircleOutlineIcon />} onClick = {() => dispatch({ type: 'addQuestion', activeExam: activeExam })}></Button> }\n          </Grid>\n        </Grid>\n      </div>\n\n      <div className = \"answer-buttons\">\n        { activeExam >= 0 && !isAdmin && isQuestionsInitialized &&\n          <Button key = {uuid()} variant = \"contained\" color = \"primary\" onClick = {() => setIsShowCorrectAnswers(!isShowCorrectAnswers)}>Näytä vastaukset</Button> }\n      </div>\n\n      {/* <div className = \"demo\">\n        { activeExam >= 0 && <Button key = {uuid()} variant = \"contained\" color = \"primary\" onClick = {() => setIsDemoShown(true)}>Tulosten demo</Button> }\n        { isDemoShown && <TestResultsDemo></TestResultsDemo> }\n      </div> */}\n\n      {/* {isLoggedIn && <DragDrop key = {uuid()}></DragDrop>} */}\n      \n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}